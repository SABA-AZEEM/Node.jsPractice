//when i import i actually invoke it, that's why it run, actually node.js wrap index.js file in funtion and when i require it executed the whole file.
//When you require a module in Node.js, the entire module is loaded into memory and executed. This means that any variables or functions defined within the module are available to other modules that require it, even if they are not explicitly exported.
//In your example, the addValues function is defined within the module, but it is not exported using the module.exports or exports keywords. However, when you require the module in another file, the entire module is loaded into memory, and the addValues function is defined and available for use within the other module.
//This behavior is a consequence of how Node.js handles module loading and execution, and it can be useful for sharing code between different parts of an application without explicitly exporting everything. However, it is generally considered good practice to export only the functions and variables that are intended to be used by other modules, to avoid polluting the global namespace and to make the code easier to understand and maintain.
require('./export');